services:
  postgres:
    image: postgres:15-alpine
    container_name: prototype_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-prototype_db}
      POSTGRES_USER: ${DATABASE_USERNAME:-prototype_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-prototype_password}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - prototype_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DATABASE_USERNAME:-prototype_user} -d ${DATABASE_NAME:-prototype_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: prototype_app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${DATABASE_USERNAME:-prototype_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-prototype_password}
      DATABASE_NAME: ${DATABASE_NAME:-prototype_db}
      APP_PORT: 3000
      API_PREFIX: api
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - ./logs:/app/logs
    networks:
      - prototype_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: prototype_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - prototype_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  prototype_network:
    driver: bridge
